1. git 
	
	config
		--list
			:: List all variables set in config file, along with their values.
				::Among the variables we can see "user.email" and "user.name" to know what email and what name we have configured respectively.
		--global
		  	:: For writing options: write to global ~/.gitconfig file rather than the repository .git/config, write to $XDG_CONFIG_HOME/git/config file if this file exists and the ~/.gitconfig file doesn’t.
		  		:: Example, set global git user name and email address
		  			git config --global user.name  "Hector Ortega"
		  			git config --global user.email "kodeprestige@gmail.com"

	init
		:: This command creates an empty Git repository - basically a .git directory with subdirectories for objects, refs/heads, refs/tags, and template files. An initial HEAD file that references the HEAD of the master branch is also created.
		:: If the $GIT_DIR environment variable is set then it specifies a path to use instead of ./.git for the base of the repository.
		::If the object storage directory is specified via the $GIT_OBJECT_DIRECTORY environment variable then the sha1 directories are created underneath - otherwise the default $GIT_DIR/objects directory is used.
		::Running git init in an existing repository is safe. It will not overwrite things that are already there. The primary reason for rerunning git init is to pick up newly added templates (or to move the repository to another place if --separate-git-dir is given).
		:::: Is there a command to undo git init?
			:: If you just inited it, you can just delete .git. Typically:
				:: rm -rf .git

	status
		:: Displays paths that have differences between the index file and the current HEAD commit, paths that have differences between the working tree and the index file, and paths in the working tree that are not tracked by Git (and are not ignored by gitignore[5]). The first are what you would commit by running git commit; the second and third are what you could commit by running git add before running git commit.

	add
		:: This command updates the index using the current content found in the working tree, to prepare the content staged for the next commit. It typically adds the current content of existing paths as a whole, but with some options it can also be used to add content with only part of the changes made to the working tree files applied, or remove paths that do not exist in the working tree anymore.
		:: The "index" holds a snapshot of the content of the working tree, and it is this snapshot that is taken as the contents of the next commit. Thus after making any changes to the working tree, and before running the commit command, you must use the add command to add any new or modified files to the index.
		:: This command can be performed multiple times before a commit. It only adds the content of the specified file(s) at the time the add command is run; if you want subsequent changes included in the next commit, then you must run git add again to add the new content to the index.
		:: The git status command can be used to obtain a summary of which files have changes that are staged for the next commit.
		:: The git add command will not add ignored files by default. If any ignored files were explicitly specified on the command line, git add will fail with a list of ignored files. Ignored files reached by directory recursion or filename globbing performed by Git (quote your globs before the shell) will be silently ignored. The git add command can be used to add ignored files with the -f (force) option.
		:: Please see git-commit for alternative ways to add content to a commit.

		::EXAMPLES
			:: Adds content from all files:
				$ git add .
			:: Adds content from all *.txt files under Documentation directory and its subdirectories:
				$ git add Documentation/\*.txt
					Note that the asterisk * is quoted from the shell in this example; this lets the command include the files from subdirectories of Documentation/ directory.
			:: Considers adding content from all git-*.sh scripts:
				$ git add git-*.sh
					Because this example lets the shell expand the asterisk (i.e. you are listing the files explicitly), it does not consider subdir/git-foo.sh.

		rm --cached <file>...
			:: To unstage

			::EXAMPLE
				git rm --cached Most\ used\ commands\ in\ Git.txt
				

		commit
				:: Create a new commit containing the current contents of the index and the given log message describing the changes. The new commit is a direct child of HEAD, usually the tip of the current branch, and the branch is updated to point to it (unless no branch is associated with the working tree, in which case HEAD is "detached" as described in git-checkout[1]).
				::The content to be committed can be specified in several ways:
					* by using git-add[1] to incrementally "add" changes to the index before using the commit command (Note: even modified files must be "added");
					* by using git-rm[1] to remove files from the working tree and the index, again before using the commit command;
					* by listing files as arguments to the commit command (without --interactive or --patch switch), in which case the commit will ignore changes staged in the index, and instead record the current content of the listed files (which must already be known to Git);
					* by using the -a switch with the commit command to automatically "add" changes from all known files (i.e. all files that are already listed in the index) and to automatically "rm" files in the index that have been removed from the working tree, and then perform the actual commit;
					* by using the --interactive or --patch switches with the commit command to decide one by one which files or hunks should be part of the commit in addition to contents in the index, before finalizing the operation. See the “Interactive Mode” section of git-add[1] to learn how to operate these modes.
				:: The --dry-run option can be used to obtain a summary of what is included by any of the above for the next commit by giving the same set of parameters (options and paths).
				:: If you make a commit and then find a mistake immediately after that, you can recover from it with git reset.
			-m <msg>
			--message=<msg>
				:: Use the given <msg> as the commit message. If multiple -m options are given, their values are concatenated as separate paragraphs.
				:: The -m option is mutually exclusive with -c, -C, and -F.

				::EXAMPLE
					git commit -m "Basic commands necessary to make the first commit"


